[{"D:\\ElifTechTask\\client\\src\\index.js":"1","D:\\ElifTechTask\\client\\src\\App.js":"2","D:\\ElifTechTask\\client\\src\\reportWebVitals.js":"3","D:\\ElifTechTask\\client\\src\\Components\\Addition\\MiddlePage.jsx":"4","D:\\ElifTechTask\\client\\src\\Components\\BankPage\\Bank.jsx":"5","D:\\ElifTechTask\\client\\src\\Components\\MortgagePage\\Mortgage.jsx":"6","D:\\ElifTechTask\\client\\src\\Components\\MortgagePage\\Table.jsx":"7","D:\\ElifTechTask\\client\\src\\Components\\Addition\\RefArrow.jsx":"8","D:\\ElifTechTask\\client\\src\\Components\\BankPage\\BankCard.jsx":"9","D:\\ElifTechTask\\client\\src\\Components\\BankPage\\CreateBank.jsx":"10","D:\\ElifTechTask\\client\\src\\Components\\BankPage\\DeleteBank.jsx":"11","D:\\ElifTechTask\\client\\src\\Components\\BankPage\\EditBank.jsx":"12","D:\\ElifTechTask\\client\\src\\Components\\BankPage\\BankSet.jsx":"13","D:\\ElifTechTask\\client\\src\\Components\\Addition\\ReloadPage.jsx":"14","D:\\ElifTechTask\\client\\src\\Components\\BankPage\\EditData.jsx":"15"},{"size":593,"mtime":1613265178389,"results":"16","hashOfConfig":"17"},{"size":525,"mtime":1613266738307,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":499162500000,"results":"19","hashOfConfig":"17"},{"size":924,"mtime":1613292053495,"results":"20","hashOfConfig":"17"},{"size":2919,"mtime":1613268013223,"results":"21","hashOfConfig":"17"},{"size":5534,"mtime":1613313720426,"results":"22","hashOfConfig":"17"},{"size":1645,"mtime":1613306255218,"results":"23","hashOfConfig":"17"},{"size":288,"mtime":1613267227408,"results":"24","hashOfConfig":"17"},{"size":355,"mtime":1613236308215,"results":"25","hashOfConfig":"17"},{"size":9059,"mtime":1613313562259,"results":"26","hashOfConfig":"17"},{"size":2587,"mtime":1613313562258,"results":"27","hashOfConfig":"17"},{"size":2967,"mtime":1613313610543,"results":"28","hashOfConfig":"17"},{"size":3641,"mtime":1613313886957,"results":"29","hashOfConfig":"17"},{"size":359,"mtime":1613236217050,"results":"30","hashOfConfig":"17"},{"size":10480,"mtime":1613313692537,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"x6c7m7",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"34"},"D:\\ElifTechTask\\client\\src\\index.js",[],["69","70"],"D:\\ElifTechTask\\client\\src\\App.js",[],"D:\\ElifTechTask\\client\\src\\reportWebVitals.js",[],"D:\\ElifTechTask\\client\\src\\Components\\Addition\\MiddlePage.jsx",["71","72"],"import s from \"./MiddlePage.module.scss\";\r\nimport Mortgage from \"../../Img/mortgage.jpg\";\r\nimport BankIcon from \"../../Img/bankCard.jpg\";\r\nimport { NavLink } from \"react-router-dom\";\r\nconst MiddlePage = () => {\r\n  return (\r\n    <div className={s.MiddlePage}>\r\n      <div className={s.Header}></div>\r\n      <div className={s.MiddlePageTitle}>Select your action</div>\r\n      <div className={s.CardBlock}>\r\n        <div className={s.BankCard}>\r\n          <img className={s.CardImg} src={BankIcon} />\r\n          <NavLink to=\"/bank\">\r\n            <button className={s.Cardbut}>Select</button>\r\n          </NavLink>\r\n        </div>\r\n        <div className={s.MortgageCard}>\r\n          <img className={s.CardImg} src={Mortgage} />\r\n          <NavLink to=\"/mortgage\">\r\n            <button className={s.Cardbut}>Select</button>\r\n          </NavLink>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MiddlePage;\r\n","D:\\ElifTechTask\\client\\src\\Components\\BankPage\\Bank.jsx",["73"],"import React, { useState } from \"react\";\r\nimport s from \"./Bank.module.scss\";\r\nimport BankPhoto from \"../../Img/bank.png\";\r\nimport BankCard from \"./BankCard\";\r\nimport Create from \"../../Img/create.jpg\";\r\nimport Edit from \"../../Img/edit.jpg\";\r\nimport Delete from \"../../Img/delete.jpeg\";\r\nimport CreateBank from \"./CreateBank\";\r\nimport DeleteBank from \"./DeleteBank\";\r\nimport EditBank from \"./EditBank\";\r\nimport BankSet from \"./BankSet\";\r\nimport RefArrow from \"../Addition/RefArrow\";\r\nimport { NavLink } from \"react-router-dom\";\r\nconst Bank = (props) => {\r\n  function onCreate() {\r\n    let editBank = document.getElementById(\"Edit\");\r\n    let deleteBank = document.getElementById(\"Delete\");\r\n    let createBank = document.getElementById(\"Create\");\r\n    editBank.style.display = \"none\";\r\n    deleteBank.style.display = \"none\";\r\n    createBank.style.display = \"block\";\r\n  }\r\n  function onDelete() {\r\n    let editBank = document.getElementById(\"Edit\");\r\n    let deleteBank = document.getElementById(\"Delete\");\r\n    let createBank = document.getElementById(\"Create\");\r\n    editBank.style.display = \"none\";\r\n    deleteBank.style.display = \"block\";\r\n    createBank.style.display = \"none\";\r\n  }\r\n  function onEdit() {\r\n    let editBank = document.getElementById(\"Edit\");\r\n    let deleteBank = document.getElementById(\"Delete\");\r\n    let createBank = document.getElementById(\"Create\");\r\n    editBank.style.display = \"block\";\r\n    deleteBank.style.display = \"none\";\r\n    createBank.style.display = \"none\";\r\n  }\r\n  return (\r\n    <div className={s.Bank}>\r\n      <div className={s.Header}></div>\r\n      <div className={s.BankIntroduction}>\r\n        <div className={s.IntroductionTitle}>\r\n          <div className={s.IntroductionText}>\r\n            Create and Manage your bank{\" \"}\r\n            <span className={s.TextPart2}>- NOW</span>\r\n          </div>\r\n        </div>\r\n        <img src={BankPhoto} alt=\"\" className={s.IntroductionImg} />\r\n      </div>\r\n      <div className={s.BankSet}>\r\n        <BankSet />\r\n      </div>\r\n      <div className={s.RefArrowBlock}>\r\n        <NavLink to=\"/mortgage\">\r\n          <RefArrow />\r\n        </NavLink>\r\n      </div>\r\n      <div className={s.BankCardBlock}>\r\n        <BankCard\r\n          className={s.CreateCard}\r\n          text={\"Create\"}\r\n          img={Create}\r\n          func={onCreate}\r\n        />\r\n        <BankCard\r\n          className={s.EditCard}\r\n          text={\"Edit\"}\r\n          img={Edit}\r\n          func={onEdit}\r\n        />\r\n        <BankCard\r\n          className={s.DeleteCard}\r\n          text={\"Delete\"}\r\n          img={Delete}\r\n          func={onDelete}\r\n        />\r\n      </div>\r\n      <div className={s.Create} id=\"Create\">\r\n        <CreateBank />\r\n      </div>\r\n      <div className={s.Edit} id=\"Edit\">\r\n        <EditBank />\r\n      </div>\r\n      <div className={s.Delete} id=\"Delete\">\r\n        <DeleteBank />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Bank;\r\n","D:\\ElifTechTask\\client\\src\\Components\\MortgagePage\\Mortgage.jsx",["74"],"import React, { useEffect, useState } from \"react\";\r\nimport s from \"./Mortgage.module.scss\";\r\nimport Axios from \"axios\";\r\nimport Table from \"./Table\";\r\nimport RefArrow from \"../Addition/RefArrow\";\r\nimport { NavLink } from \"react-router-dom\";\r\nconst Mortgage = (props) => {\r\n  const [initialLoan, setInitialLoan] = useState(0);\r\n  const [downPayment, setDownPayments] = useState(0);\r\n  const [banks, setBanks] = useState([]);\r\n  const [dataBank, setData] = useState([]);\r\n  const [result, setResult] = useState(0);\r\n  const [month, setMonth] = useState(0);\r\n  const [rentYear, SetRent] = useState(0);\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    Axios.get(\"https://elif-tech-task.herokuapp.com/bank\").then((Response) => {\r\n      setBanks(Response.data);\r\n    });\r\n  }, []);\r\n\r\n\r\n\r\n\r\n  \r\n\r\n\r\n  function getSelected(e) {\r\n    let selectBank = document.getElementById(\"Select\");\r\n    if (selectBank.value !== \"None\") {\r\n      let strBank = selectBank.value.substring(3);\r\n      let arrBank = strBank.split(\" \");\r\n      Axios.get(\"http://localhost:3001/bank/\" + arrBank[0]).then(\r\n        (Response) => {\r\n          if (Response.status === 200) {\r\n            setData(Response.data);\r\n            setMonth(Response.data[0].loan_term);\r\n            SetRent(Response.data[0].min_down_payment / 100);\r\n          } else {\r\n            setMessage(\"Error, something went wrong\");\r\n          }\r\n        },\r\n        (err) => {\r\n          setMessage(\"Error, something went wrong\");\r\n        }\r\n      );\r\n    }\r\n  }\r\n \r\n  function calculateMotgage() {\r\n    let table = document.getElementById(\"Table\");\r\n    let result = document.getElementById(\"Result\");\r\n    let selectBank = document.getElementById(\"Select\");\r\n    let rent = (initialLoan * dataBank[0].min_down_payment) / 100;\r\n\r\n    if (selectBank.value !== \"None\") {\r\n      if (!isNaN(Number(initialLoan))) {\r\n        if (Number(initialLoan) > 0) {\r\n          if (initialLoan > downPayment) {\r\n            if (downPayment >= rent) {\r\n              if (initialLoan <= dataBank[0].max_loan) {\r\n                let interestRate = dataBank[0].interest_rate / 100;\r\n                let amountBorroved = initialLoan - downPayment;\r\n                let p1 = amountBorroved * (interestRate / 12);\r\n                let p2 = (1 + interestRate / 12) ** dataBank[0].loan_term;\r\n                let mouthlyPayment = (p1 * p2) / (p2 - 1);\r\n                result.parentElement.style.display = \"block\";\r\n                result.innerHTML = \" \" + mouthlyPayment.toFixed(2);\r\n                table.style.display = \"block\";\r\n                setMessage(\"\");\r\n                setResult(mouthlyPayment.toFixed(2));\r\n              } else {\r\n                result.parentElement.style.display = \"none\";\r\n                setMessage(\"Initial loan exceeds the allowable\");\r\n              }\r\n            } else {\r\n              result.parentElement.style.display = \"none\";\r\n              setMessage(\"Down payment must be more\");\r\n            }\r\n          } else {\r\n            result.parentElement.style.display = \"none\";\r\n            setMessage(\"Initial must be more than dawn payment\");\r\n          }\r\n        } else {\r\n          result.parentElement.style.display = \"none\";\r\n          setMessage(\"Initial loan must be more than 0\");\r\n        }\r\n      } else {\r\n        result.parentElement.style.display = \"none\";\r\n        setMessage(\"Initial loan must be a number\");\r\n      }\r\n    } else {\r\n      result.parentElement.style.display = \"none\";\r\n      setMessage(\"Please, select a bank\");\r\n    }\r\n  }\r\n  let bank = banks.map((p) => (\r\n    <option key={p.Id}>\r\n      ID:{p.Id} {p.name}\r\n    </option>\r\n  ));\r\n  function getInitialLoan(e) {\r\n    setInitialLoan(Number(e.target.value));\r\n  }\r\n  function getDownPayments(e) {\r\n    setDownPayments(Number(e.target.value));\r\n  }\r\n  return (\r\n    <div className={s.Mortgage}>\r\n      <div className={s.Header}></div>\r\n      <div className={s.MortgageBlock}>\r\n        <div className={s.MortgageBlockTitle}>Mortgage Calculator</div>\r\n        <div className={s.MortgageBlockCalculator}>\r\n          <div className={s.MortgageBlockCalculatorInputs}>\r\n            <input\r\n              type=\"text\"\r\n              className={s.MortgageBlockCalInitial}\r\n              onChange={getInitialLoan}\r\n            />\r\n            <input\r\n              type=\"text\"\r\n              className={s.MortgageBlockCalDownPayment}\r\n              onChange={getDownPayments}\r\n            />\r\n            <select\r\n              name=\"\"\r\n              id=\"\"\r\n              className={s.MortgageBlockCalBank}\r\n              id=\"Select\"\r\n              onChange={getSelected}\r\n            >\r\n              <option>None</option>\r\n              {bank}\r\n            </select>\r\n          </div>\r\n          <button className={s.MortgageBlockCalBut} onClick={calculateMotgage}>\r\n            Calculate\r\n          </button>\r\n          <div className={s.ResultBlock}>\r\n            {\" \"}\r\n            Result:\r\n            <span className={s.Result} id=\"Result\"></span>\r\n          </div>\r\n        </div>\r\n        <div className={s.Message}>{message}</div>\r\n      </div>\r\n      <div className={s.Table} id=\"Table\">\r\n        <Table\r\n          rent={rentYear}\r\n          initialLoan={initialLoan}\r\n          result={result}\r\n          month={month}\r\n          downPayment={downPayment}\r\n        />\r\n      </div>{\" \"}\r\n      <div className={s.RefArrowBlock}>\r\n        <NavLink to=\"/bank\">\r\n          <RefArrow />\r\n        </NavLink>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Mortgage;\r\n","D:\\ElifTechTask\\client\\src\\Components\\MortgagePage\\Table.jsx",["75","76"],"import React, { useEffect, useState } from \"react\";\r\nimport s from \"./Table.module.scss\";\r\nconst Table = (props) => {\r\n  let table = [];\r\n  let TotalPayment = Number(props.result);\r\n  let initialLoan = props.initialLoan - props.downPayment;\r\n  console.log(initialLoan);\r\n  let initial = initialLoan;\r\n  let downPayment = props.downPayment;\r\n  let balanceRent = 0;\r\n  for (let i = 0; i < props.month; i++) {\r\n    let rent = Number((initial * props.rent) / 12);\r\n\r\n    downPayment += TotalPayment - rent;\r\n    balanceRent += rent;\r\n    initialLoan -= TotalPayment;\r\n    let balance = initialLoan + balanceRent;\r\n    table.push(\r\n      <div className={s.TableBlock} key={i}>\r\n        <div className={s.TableMonth}>{i + 1}</div>\r\n        <div className={s.TotalPayment}>$ {TotalPayment}</div>\r\n        <div className={s.InterestPayment}>${rent.toFixed(2)}</div>\r\n        <div className={s.LoanBalance}>\r\n          ${balance > 0 ? balance.toFixed(2) : 0}\r\n        </div>\r\n        <div className={s.Equity}>\r\n          $\r\n          {balance > 0\r\n            ? downPayment.toFixed(2)\r\n            : (downPayment + balance).toFixed(2)}\r\n        </div>\r\n      </div>\r\n    );\r\n    initial -= TotalPayment;\r\n  }\r\n\r\n  return (\r\n    <div className={s.Table}>\r\n      <div className={s.TableBlock}>\r\n        <div className={s.TableMonth}>Month</div>\r\n        <div className={s.TotalPayment}>Total Payment</div>\r\n        <div className={s.InterestPayment}>Interest Payment</div>\r\n        <div className={s.LoanBalance}>Loan Balance</div>\r\n        <div className={s.Equity}>Equity</div>\r\n      </div>\r\n      {table}\r\n    </div>\r\n  );\r\n};\r\nexport default Table;\r\n","D:\\ElifTechTask\\client\\src\\Components\\Addition\\RefArrow.jsx",[],"D:\\ElifTechTask\\client\\src\\Components\\BankPage\\BankCard.jsx",["77","78"],"import React, { useState } from \"react\";\r\nimport s from \"./BankCard.module.scss\";\r\n\r\nconst BankCard = (props) => {\r\n  return (\r\n    <div className={s.BankCard}>\r\n     <img className={s.BankCardImg} src={props.img}/>\r\n     <button className={s.BankCardBut} onClick={props.func}>{props.text}</button>\r\n     \r\n    </div>\r\n  );\r\n};\r\nexport default BankCard;\r\n","D:\\ElifTechTask\\client\\src\\Components\\BankPage\\CreateBank.jsx",[],"D:\\ElifTechTask\\client\\src\\Components\\BankPage\\DeleteBank.jsx",[],"D:\\ElifTechTask\\client\\src\\Components\\BankPage\\EditBank.jsx",[],"D:\\ElifTechTask\\client\\src\\Components\\BankPage\\BankSet.jsx",[],"D:\\ElifTechTask\\client\\src\\Components\\Addition\\ReloadPage.jsx",[],"D:\\ElifTechTask\\client\\src\\Components\\BankPage\\EditData.jsx",["79"],"import React, { useState } from \"react\";\r\nimport s from \"./EditBank.module.scss\";\r\nimport Axios from \"axios\";\r\nimport ReloadPage from \"../Addition/ReloadPage\";\r\nconst EditData = (props) => {\r\n  function changeFieldString(e) {\r\n    if (e.target.value.length > 0) {\r\n      e.target.parentElement.parentElement.children[2].innerHTML = \"\";\r\n    }\r\n  }\r\n  function changeFieldNumber(e) {\r\n    if (!isNaN(e.target.value)) {\r\n      if (e.target.value.length > 0) {\r\n        e.target.parentElement.parentElement.children[2].innerHTML = \"\";\r\n      }\r\n    }\r\n  }\r\n  function updateName(e) {\r\n    let inputValue = e.target.parentElement.children[0].value;\r\n\r\n    if (inputValue.length > 0) {\r\n      Axios.put(\"https://elif-tech-task.herokuapp.com/update/name/\" + props.Id, {\r\n        name: inputValue,\r\n      }).then(\r\n        (Response) => {\r\n          if (Response.status === 200) {\r\n            e.target.parentElement.parentElement.children[2].innerHTML = \"\";\r\n            e.target.parentElement.parentElement.children[3].innerHTML =\r\n              \"Successfully edited\";\r\n            e.target.parentElement.children[0].value = \"\";\r\n            let reload = document.getElementById(\"Reload\");\r\n            reload.style.display = \"block\";\r\n          }\r\n        },\r\n        (err) => {\r\n          e.target.parentElement.parentElement.children[3].innerHTML = \"\";\r\n          e.target.parentElement.parentElement.children[2].innerHTML =\r\n            \"Error, something went wrong\";\r\n        }\r\n      );\r\n    } else {\r\n      e.target.parentElement.parentElement.children[2].innerHTML =\r\n        \"The field value must not be empty \";\r\n    }\r\n  }\r\n  function updateRate(e) {\r\n    let inputValue = Number(e.target.parentElement.children[0].value);\r\n    if (!isNaN(inputValue)) {\r\n      if (inputValue > 0) {\r\n        if (inputValue < 100) {\r\n          Axios.put(\"http://localhost:3001/update/rate/\" + props.Id, {\r\n            rate: inputValue,\r\n          }).then(\r\n            (Response) => {\r\n              if (Response.status === 200) {\r\n                e.target.parentElement.parentElement.children[2].innerHTML = \"\";\r\n                e.target.parentElement.parentElement.children[3].innerHTML =\r\n                  \"Successfully edited\";\r\n                e.target.parentElement.children[0].value = \"\";\r\n                let reload = document.getElementById(\"Reload\");\r\n                reload.style.display = \"block\";\r\n              }\r\n            },\r\n            (err) => {\r\n              e.target.parentElement.parentElement.children[3].innerHTML = \"\";\r\n              e.target.parentElement.parentElement.children[2].innerHTML =\r\n                \"Error, something went wrong\";\r\n            }\r\n          );\r\n        } else {\r\n          e.target.parentElement.parentElement.children[2].innerHTML =\r\n            \"The field value must be less than 100%\";\r\n        }\r\n      } else {\r\n        e.target.parentElement.parentElement.children[2].innerHTML =\r\n          \"The field must be more than 0%\";\r\n      }\r\n    } else {\r\n      e.target.parentElement.parentElement.children[2].innerHTML =\r\n        \"The field value must be a number\";\r\n    }\r\n  }\r\n  function updateMaxLoan(e) {\r\n    let inputValue = Number(e.target.parentElement.children[0].value);\r\n    if (!isNaN(inputValue)) {\r\n      if (inputValue > 0) {\r\n        Axios.put(\"https://elif-tech-task.herokuapp.com/update/max_loan/\" + props.Id, {\r\n          max_loan: inputValue,\r\n        }).then(\r\n          (Response) => {\r\n            if (Response.status === 200) {\r\n              e.target.parentElement.parentElement.children[2].innerHTML = \"\";\r\n              e.target.parentElement.parentElement.children[3].innerHTML =\r\n                \"Successfully edited\";\r\n              e.target.parentElement.children[0].value = \"\";\r\n              let reload = document.getElementById(\"Reload\");\r\n              reload.style.display = \"block\";\r\n            }\r\n          },\r\n          (err) => {\r\n            e.target.parentElement.parentElement.children[3].innerHTML = \"\";\r\n            e.target.parentElement.parentElement.children[2].innerHTML =\r\n              \"Error, something went wrong\";\r\n          }\r\n        );\r\n      } else {\r\n        e.target.parentElement.parentElement.children[2].innerHTML =\r\n          \"The field value must be more than 0$\";\r\n      }\r\n    } else {\r\n      e.target.parentElement.parentElement.children[2].innerHTML =\r\n        \"The field value must be a number\";\r\n    }\r\n  }\r\n  function updateMinLoan(e) {\r\n    let inputValue = Number(e.target.parentElement.children[0].value);\r\n    if (!isNaN(inputValue)) {\r\n      if (inputValue > 0) {\r\n        if (inputValue < 100) {\r\n          Axios.put(\"https://elif-tech-task.herokuapp.com/update/min_loan/\" + props.Id, {\r\n            min_loan: inputValue,\r\n          }).then(\r\n            (Response) => {\r\n              if (Response.status === 200) {\r\n                e.target.parentElement.parentElement.children[2].innerHTML = \"\";\r\n                e.target.parentElement.parentElement.children[3].innerHTML =\r\n                  \"Successfully edited\";\r\n                e.target.parentElement.children[0].value = \"\";\r\n                let reload = document.getElementById(\"Reload\");\r\n                reload.style.display = \"block\";\r\n              }\r\n            },\r\n            (err) => {\r\n              e.target.parentElement.parentElement.children[3].innerHTML = \"\";\r\n              e.target.parentElement.parentElement.children[2].innerHTML =\r\n                \"Error, something went wrong\";\r\n            }\r\n          );\r\n        } else {\r\n          e.target.parentElement.parentElement.children[2].innerHTML =\r\n            \"The field value must be less than 100%\";\r\n        }\r\n      } else {\r\n        e.target.parentElement.parentElement.children[2].innerHTML =\r\n          \"The field value value must be more than 0%\";\r\n      }\r\n    } else {\r\n      e.target.parentElement.parentElement.children[2].innerHTML =\r\n        \"The field value must be a number\";\r\n    }\r\n  }\r\n  function updateLoanTerm(e) {\r\n    let inputValue = Number(e.target.parentElement.children[0].value);\r\n    if (!isNaN(inputValue)) {\r\n      if (inputValue > 0) {\r\n        if (inputValue < 240) {\r\n          Axios.put(\"https://elif-tech-task.herokuapp.com/update/loan_term/\" + props.Id, {\r\n            loan_term: inputValue,\r\n          }).then(\r\n            (Response) => {\r\n              if (Response.status === 200) {\r\n                e.target.parentElement.parentElement.children[2].innerHTML = \"\";\r\n                e.target.parentElement.parentElement.children[3].innerHTML =\r\n                  \"Successfully edited\";\r\n                e.target.parentElement.children[0].value = \"\";\r\n                let reload = document.getElementById(\"Reload\");\r\n                reload.style.display = \"block\";\r\n              }\r\n            },\r\n            (err) => {\r\n              e.target.parentElement.parentElement.children[3].innerHTML = \"\";\r\n              e.target.parentElement.parentElement.children[2].innerHTML =\r\n                \"Error, something went wrong\";\r\n            }\r\n          );\r\n        } else {\r\n          e.target.parentElement.parentElement.children[2].innerHTML =\r\n            \"The field value must be less than 240 month\";\r\n        }\r\n      } else {\r\n        e.target.parentElement.parentElement.children[2].innerHTML =\r\n          \"The field value must be more than 0 month \";\r\n      }\r\n    } else {\r\n      e.target.parentElement.parentElement.children[2].innerHTML =\r\n        \"The field value must be a number\";\r\n    }\r\n  }\r\n  return (\r\n    <div>\r\n      <div className={s.EditBankDataBlock}>\r\n        <div className={s.EditBankDataTitle}>\r\n          Name: <span className={s.EditBankDataEl}>{props.name}</span>\r\n        </div>\r\n        <div className={s.EditBankDataContainer}>\r\n          <input className={s.EditBankDataInput} onChange={changeFieldString} />\r\n          <button className={s.EditBankDataBut} onClick={updateName}>\r\n            Edit\r\n          </button>\r\n        </div>\r\n        <div className={s.Message}></div>\r\n        <div className={s.Success}></div>\r\n      </div>\r\n      <div className={s.EditBankDataBlock}>\r\n        <div className={s.EditBankDataTitle}>\r\n          Interest rent:\r\n          <span className={s.EditBankDataEl}>{props.interest_rate}%</span>\r\n        </div>{\" \"}\r\n        <div className={s.EditBankDataContainer}>\r\n          <input className={s.EditBankDataInput} onChange={changeFieldNumber} />\r\n          <button className={s.EditBankDataBut} onClick={updateRate}>\r\n            Edit\r\n          </button>\r\n        </div>\r\n        <div className={s.Message}></div>\r\n        <div className={s.Success}></div>\r\n      </div>\r\n      <div className={s.EditBankDataBlock}>\r\n        <div className={s.EditBankDataTitle}>\r\n          Max loan: <span className={s.EditBankDataEl}>${props.max_loan}</span>\r\n        </div>{\" \"}\r\n        <div className={s.EditBankDataContainer}>\r\n          <input className={s.EditBankDataInput} onChange={changeFieldNumber} />\r\n          <button className={s.EditBankDataBut} onClick={updateMaxLoan}>\r\n            Edit\r\n          </button>\r\n        </div>\r\n        <div className={s.Message}></div>\r\n        <div className={s.Success}></div>\r\n      </div>\r\n      <div className={s.EditBankDataBlock}>\r\n        <div className={s.EditBankDataTitle}>\r\n          Min payment:\r\n          <span className={s.EditBankDataEl}>{props.min_down_payment}%</span>\r\n        </div>\r\n\r\n        <div className={s.EditBankDataContainer}>\r\n          <input className={s.EditBankDataInput} onChange={changeFieldNumber} />\r\n          <button className={s.EditBankDataBut} onClick={updateMinLoan}>\r\n            Edit\r\n          </button>\r\n        </div>\r\n        <div className={s.Message}></div>\r\n        <div className={s.Success}></div>\r\n      </div>\r\n      <div className={s.EditBankDataBlock}>\r\n        <div className={s.EditBankDataTitle}>\r\n          Loan term:{\" \"}\r\n          <span className={s.EditBankDataEl}> {props.loan_term} month</span>\r\n        </div>\r\n        <div className={s.EditBankDataContainer}>\r\n          <input className={s.EditBankDataInput} onChange={changeFieldNumber} />\r\n          <button className={s.EditBankDataBut} onClick={updateLoanTerm}>\r\n            Edit\r\n          </button>\r\n        </div>\r\n        <div className={s.Message}></div>\r\n        <div className={s.Success}></div>\r\n      </div>\r\n\r\n      <div className={s.Reload} id=\"Reload\">\r\n        <ReloadPage />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default EditData;\r\n",{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":12,"column":11,"nodeType":"86","endLine":12,"endColumn":55},{"ruleId":"84","severity":1,"message":"85","line":18,"column":11,"nodeType":"86","endLine":18,"endColumn":55},{"ruleId":"87","severity":1,"message":"88","line":1,"column":17,"nodeType":"89","messageId":"90","endLine":1,"endColumn":25},{"ruleId":"91","severity":1,"message":"92","line":130,"column":15,"nodeType":"93","endLine":130,"endColumn":26},{"ruleId":"87","severity":1,"message":"94","line":1,"column":17,"nodeType":"89","messageId":"90","endLine":1,"endColumn":26},{"ruleId":"87","severity":1,"message":"88","line":1,"column":28,"nodeType":"89","messageId":"90","endLine":1,"endColumn":36},{"ruleId":"87","severity":1,"message":"88","line":1,"column":17,"nodeType":"89","messageId":"90","endLine":1,"endColumn":25},{"ruleId":"84","severity":1,"message":"85","line":7,"column":6,"nodeType":"86","endLine":7,"endColumn":54},{"ruleId":"87","severity":1,"message":"88","line":1,"column":17,"nodeType":"89","messageId":"90","endLine":1,"endColumn":25},"no-native-reassign",["95"],"no-negated-in-lhs",["96"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation"]